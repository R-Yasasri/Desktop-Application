/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package src;

import java.awt.Container;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Enumeration;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import static src.Home.LABEL_HEIGHT;
import static src.Home.LABEL_WIDTH;

/**
 *
 * @author User
 */
public class FileExplorer extends javax.swing.JInternalFrame {

    public static Toolkit toolkit;
    private int contextMenuX;
    private int contextMenuY;

    private int currentXPosition = 0;
    private int currentYPosition = 0;

    private int xDistance = 60;
    private int yDistance = 60;

    private String current;//current folder
    private String parentFolder;
    private String currentFilePath;
    private String pathSeperator = "/";

    private JLabel rightClickedLabel;
    private FileComponent copiedComponent;

    public FileExplorer() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        panel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        jMenuItem10.setText("Rename");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem10);

        jMenuItem1.setText("Undo");
        jMenuItem1.setEnabled(false);
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);
        jPopupMenu1.add(jSeparator2);

        jMenu1.setText("New");

        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/thumbnails/icons8-folder-16.png"))); // NOI18N
        jMenuItem3.setText("Folder");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);
        jMenu1.add(jSeparator1);

        jMenuItem5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/thumbnails/icons8-image-16.png"))); // NOI18N
        jMenuItem5.setText("Bitmap Image");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/thumbnails/icons8-ms-word-is-a-word-processor-developed-by-microsoft-16.png"))); // NOI18N
        jMenuItem6.setText("Microsoft Word Document");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuItem7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/thumbnails/icons8-winrar-16.png"))); // NOI18N
        jMenuItem7.setText("WinRAR Archive");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem7);

        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/thumbnails/icons8-text-file-16.png"))); // NOI18N
        jMenuItem2.setText("Text Document");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/thumbnails/icons8-microsoft-excel-16.png"))); // NOI18N
        jMenuItem8.setText("Microsoft Excel Worksheet");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem8);

        jPopupMenu1.add(jMenu1);
        jPopupMenu1.add(jSeparator4);

        jMenuItem4.setText("Copy");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem4);

        jMenuItem9.setText("Paste");
        jMenuItem9.setEnabled(false);
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem9);
        jPopupMenu1.add(jSeparator3);

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("File Explorer");
        setToolTipText("");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/img/desktop.png"))); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setViewportView(jTree1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 150, 420));

        panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                panelMouseReleased(evt);
            }
        });
        panel.setLayout(new java.awt.GridLayout(0, 5));
        jPanel1.add(panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 0, 440, 450));

        jButton1.setText("Back");
        jButton1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 150, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // Folder

        FileComponent folder = createFileComponent(Home.FileType.FOLDER);

        if (folder != null) {

            JLabel label = getLabel(folder);
            addToPanel(label);
            addToHierarchy(folder, false);
        }


    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // Text File
        FileComponent file = createFileComponent(Home.FileType.TEXT);

        if (file != null) {
            JLabel label = getLabel(file);
            addToPanel(label);
            addToHierarchy(file, false);
        }

    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void panelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelMouseReleased
        if (evt.getButton() == MouseEvent.BUTTON3) {
            contextMenuX = evt.getX();
            contextMenuY = evt.getY();
            jPopupMenu1.show(this, contextMenuX, contextMenuY);
        }
    }//GEN-LAST:event_panelMouseReleased

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // Copy operation

        if (rightClickedLabel != null) {

            FileComponent fc = (FileComponent) getNode(rightClickedLabel.getText());
            copiedComponent = fc.clone();
            jMenuItem9.setEnabled(true);
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // Bitmap image

        FileComponent file = createFileComponent(Home.FileType.BITMAP);

        if (file != null) {
            JLabel label = getLabel(file);
            addToPanel(label);
            addToHierarchy(file, false);
        }

    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // Microsoft word

        FileComponent file = createFileComponent(Home.FileType.WORD);

        JLabel label = getLabel(file);
        addToPanel(label);
        addToHierarchy(file, false);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // WinRAR

        FileComponent file = createFileComponent(Home.FileType.WINRAR);

        if (file != null) {
            JLabel label = getLabel(file);
            addToPanel(label);
            addToHierarchy(file, false);
        }

    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // Microsoft Excel

        FileComponent file = createFileComponent(Home.FileType.EXCEL);

        if (file != null) {
            JLabel label = getLabel(file);
            addToPanel(label);
            addToHierarchy(file, false);
        }

    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // Paste operation

        addToHierarchy(copiedComponent, false);
        JLabel label = getLabel(copiedComponent);
        addToPanel(label);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed

    }//GEN-LAST:event_formInternalFrameClosed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        this.setCurrent(Home.ROOT);
        this.resetFilePath();
    }//GEN-LAST:event_formInternalFrameClosing

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // Rename operation
        String name = JOptionPane.showInputDialog(this, "Name: ", "Question", JOptionPane.QUESTION_MESSAGE);

        if (!name.isEmpty()) {
            FileComponent fc = (FileComponent) getNode(rightClickedLabel.getText());
            fc.save();
            fc.setName(name);
            changeName(rightClickedLabel, jMenuItem1, true, name);
        }
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        //Undo operation

        if (rightClickedLabel != null) {

            FileComponent fileComp = (FileComponent) getNode(rightClickedLabel.getText());
            FileComponent undo = fileComp.undo();
            boolean enable = true;
            if (fileComp.getRemainingStateCount() == 0) {
                jMenuItem1.setEnabled(false);
                enable = false;
            }
            changeName(rightClickedLabel, jMenuItem1, enable, undo.getName());

        }


    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Back button

        updateFileExplorer(getParentFolder());
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JTree jTree1;
    private javax.swing.JPanel panel;
    // End of variables declaration//GEN-END:variables

    private void mouseEventHandler(MouseEvent evt, String folderIfApplicable) {

        if (evt.getButton() == MouseEvent.BUTTON1 && evt.getClickCount() == 2) {
            updateFileExplorer(folderIfApplicable);
        }

        if (evt.getButton() == MouseEvent.BUTTON3) {
            JLabel label = (JLabel) evt.getSource();
            rightClickedLabel = label;
            contextMenuX = label.getX() + LABEL_WIDTH / 2;
            contextMenuY = label.getY() + (LABEL_HEIGHT / 4 * 3);
            jPopupMenu1.show(this, contextMenuX, contextMenuY);
        }
    }

    private void updateFileExplorer(String folder) {
        parentFolder=current;
        current = folder;
        String newFilePath = getCurrentFilePath() + getPathSeperator() + folder + getCurrentFilePath();
        setCurrentFilePath(newFilePath);

        showFolderContent();

    }

    private void init() {

        DefaultTreeModel model = (DefaultTreeModel) jTree1.getModel();

        FolderFactory factory = new FolderFactory();
        Folder desktop = factory.getFileComponent(Home.FileType.FOLDER);
        desktop.name = Home.ROOT;
        model.setRoot(desktop);
        current = desktop.name;
        parentFolder = current;
        resetFilePath();
//        CustomTreeCellRenderer customTreeCellRenderer = new CustomTreeCellRenderer();
//        
//        Image fileImage = getToolkit().getDefaultToolkit().getImage(getClass().getResource("img/icons8-file-16.png"));
//        Image folderImage = getToolkit().getDefaultToolkit().getImage(getClass().getResource("img/icons8-folder-16.png"));
//        
//        ImageIcon file=new ImageIcon(fileImage);
//        ImageIcon folder=new ImageIcon(folderImage);
//        
//        customTreeCellRenderer.setRendererIcon(folder, file);
//        jTree1.setCellRenderer(customTreeCellRenderer);
    }

    public void resetFilePath() {
        currentFilePath = Home.ROOT + getPathSeperator();
    }

    public String getCurrentFilePath() {
        return currentFilePath;
    }

    public String getPathSeperator() {
        return pathSeperator;
    }

    private void move(JComponent comp, MouseEvent evt) {
         //comp.setLocation(evt.getX(), evt.getY());
    }

    private void addToPanel(JLabel label) {

        label.setSize(Home.LABEL_WIDTH, Home.LABEL_HEIGHT);
        label.setVerticalAlignment(JLabel.TOP);
        label.setToolTipText(label.getText());

        label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {

                mouseEventHandler(evt, label.getText());

            }
        });

        label.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                move(label, evt);
            }
        });

        panel.add(label);
        panel.validate();
        panel.repaint();
    }

    public DefaultMutableTreeNode getNode(String name) {
        DefaultTreeModel model = (DefaultTreeModel) jTree1.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();

        Enumeration e = root.breadthFirstEnumeration();
        while (e.hasMoreElements()) {

            Object next = e.nextElement();

            FileComponent fc = (FileComponent) next;

            if (name.equals(next.toString())) {

                FileComponent fold = (FileComponent) next;
                if (!fold.isFile()) {
                    Folder f = (Folder) fold;

                    DefaultMutableTreeNode node = (DefaultMutableTreeNode) next;
//                    System.out.println(name+" "+f.fileList+" "+node.getChildCount());
                }

                return (DefaultMutableTreeNode) next;
            }
        }

        return null;
    }

    public void addToHierarchy(FileComponent fc, boolean isCloned) {
        DefaultTreeModel model = (DefaultTreeModel) jTree1.getModel();

        DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();

        if (model.getRoot() == null) {
            model.setRoot(fc);

        } else {
            Folder parentFolder = (Folder) getNode(current);

            if (!isCloned) {
                parentFolder.addFileComponent(fc);
            }

            parentFolder.add(fc);
        }

        model.reload(root);

    }

    public void addToHierarchy(FileComponent fc, String toFolder, boolean isCloned) {
        DefaultTreeModel model = (DefaultTreeModel) jTree1.getModel();

        DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();

        if (model.getRoot() == null) {
            model.setRoot(fc);

        } else {
            Folder parentFolder = (Folder) getNode(toFolder);

            if (!isCloned) {
                parentFolder.addFileComponent(fc);
            }
            parentFolder.add(fc);
        }

        model.reload(root);

    }

    public void setCurrent(String current) {
        this.current = current;// sets current directory
    }

    private JLabel getLabel(FileComponent fileComponent) {
        JLabel label = new JLabel();
        label.setIcon(fileComponent.getImage());

        label.setVerticalTextPosition(JLabel.BOTTOM);
        label.setHorizontalTextPosition(JLabel.CENTER);
        label.setText(fileComponent.getName());

        label.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                move(label, evt);
            }
        });

        return label;
    }

    public void showFolderContent() {

        this.panel.removeAll();

        ArrayList<FileComponent> fileList = getCurrentFolderContent();
        for (FileComponent fileComponent : fileList) {
            JLabel label = getLabel(fileComponent);

            label.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseReleased(java.awt.event.MouseEvent evt) {
                    mouseEventHandler(evt, label.getText());
                }
            });

            label.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
                public void mouseDragged(java.awt.event.MouseEvent evt) {
                    move(label, evt);
                }
            });

            addToPanel(label);
        }

        this.setTitle(current);

        this.panel.repaint();
    }

    public ArrayList<FileComponent> getCurrentFolderContent() {
        Folder folder = (Folder) getNode(current);
        ArrayList<FileComponent> fileList = folder.getFileList();
        return fileList;
    }

    private FileComponent createFileComponent(Home.FileType type) {

        String msg;
        if (type == Home.FileType.FOLDER) {
            msg = "Please enter the folder name";
        } else {
            msg = "Please enter the file name";
        }

        String name = JOptionPane.showInputDialog(this, msg, "Question", JOptionPane.QUESTION_MESSAGE);
        if (name == null || name.isEmpty()) {
            return null;
        } else {

            FileComponent fileComp;
            if (type == Home.FileType.FOLDER) {
                FolderFactory factory = new FolderFactory();
                fileComp = factory.getFileComponent(Home.FileType.FOLDER);
            } else {
                FileFactory factory = new FileFactory();
                fileComp = factory.getFileComponent(type);
            }

            fileComp.setName(name);
            fileComp.setFilePath(currentFilePath);
            return fileComp;

        }

    }

    public String getCurrent() {
        return this.current;
    }

    private void changeName(JLabel rightClickedLabel1, JMenuItem jMenuItem11, boolean enable, String name) {

        rightClickedLabel.setText(name);
        rightClickedLabel1.setToolTipText(name);
        jMenuItem1.setEnabled(enable);
    }

    private String createCopiedFileName(FileComponent copiedComponent) {
        String name = copiedComponent.getName() + " - Copy";

        int count = 0;
        ArrayList<FileComponent> currentFolderContent = getCurrentFolderContent();
        for (FileComponent fileComponent : currentFolderContent) {
            if (fileComponent.name.contains(name)) {
                ++count;
            }

        }

        if (count == 0) {
            return name;
        } else {
            return name + " (" + count + ")";
        }
    }

    public void setCurrentFilePath(String currentFilePath) {
        this.currentFilePath = currentFilePath;
    }

    public void setParentFolder(String parentFolder) {
        this.parentFolder = parentFolder;
    }

    public String getParentFolder() {
        return parentFolder;
    }

}

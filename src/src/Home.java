/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package src;

import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;

/**
 *
 * @author rajitha
 */
public class Home extends javax.swing.JFrame {

    private static int parentFolderFileCount = 0;
    public static Toolkit toolkit;
    private int contextMenuX;
    private int contextMenuY;
    private static FileExplorer fileExplorer;

    public static final int LABEL_WIDTH = 70;
    public static final int LABEL_HEIGHT = 70;

    public static final int INITIAL_FILE_EXPLORER_WIDTH = 50;
    public static final int INITIAL_FILE_EXPLORER_HEIGHT = 50;

    public static final String ROOT = "Desktop";

    private JLabel rightClickedLabel = null;

    private FileComponent copiedComponent = null;
    private static boolean firstTime = true;

    enum FileType {
        FOLDER,
        BITMAP,
        WORD,
        WINRAR,
        TEXT,
        EXCEL
    }

    /**
     * Creates new form Home
     */
    public Home() {
        initComponents();
        setIcon();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        panel = new javax.swing.JPanel();

        jMenuItem10.setText("Rename");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem10);

        jMenuItem1.setText("Undo");
        jMenuItem1.setEnabled(false);
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);
        jPopupMenu1.add(jSeparator4);

        jMenu1.setText("New");

        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/thumbnails/icons8-folder-16.png"))); // NOI18N
        jMenuItem3.setText("Folder");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);
        jMenu1.add(jSeparator1);

        jMenuItem7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/thumbnails/icons8-image-16.png"))); // NOI18N
        jMenuItem7.setText("Bitmap Image");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem7);

        jMenuItem6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/thumbnails/icons8-ms-word-is-a-word-processor-developed-by-microsoft-16.png"))); // NOI18N
        jMenuItem6.setText("Microsoft Word Document");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuItem5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/thumbnails/icons8-winrar-16.png"))); // NOI18N
        jMenuItem5.setText("WinRAR Archive");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/thumbnails/icons8-text-file-16.png"))); // NOI18N
        jMenuItem2.setText("Text Document");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/thumbnails/icons8-microsoft-excel-16.png"))); // NOI18N
        jMenuItem8.setText("Microsoft Excel Worksheet");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem8);

        jPopupMenu1.add(jMenu1);
        jPopupMenu1.add(jSeparator2);

        jMenuItem4.setText("Copy");
        jMenuItem4.setToolTipText("");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem4);

        jMenuItem9.setText("Paste");
        jMenuItem9.setEnabled(false);
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem9);
        jPopupMenu1.add(jSeparator3);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simple Desktop Environment");

        jDesktopPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jDesktopPane1MouseReleased(evt);
            }
        });

        panel.setOpaque(false);
        panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jDesktopPane1.setLayer(panel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, 833, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, 525, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jDesktopPane1)
                .addGap(2, 2, 2))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jDesktopPane1)
                .addGap(1, 1, 1))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jDesktopPane1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jDesktopPane1MouseReleased

        if (evt.getButton() == MouseEvent.BUTTON3) {
            contextMenuX = evt.getX();
            contextMenuY = evt.getY();
            jPopupMenu1.show(this, contextMenuX, contextMenuY);

        }
    }//GEN-LAST:event_jDesktopPane1MouseReleased

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // Folder
        FileComponent folder = createFileComponent(FileType.FOLDER);

        if (folder != null) {
            addToDesktop(folder, true);
        }

    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // Text File
        FileComponent file = createFileComponent(FileType.TEXT);

        if (file != null) {
            addToDesktop(file, false);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
//copy operation

        if (rightClickedLabel != null) {

            FileComponent fc = (FileComponent) fileExplorer.getNode(rightClickedLabel.getText());
            copiedComponent = fc;
            jMenuItem9.setEnabled(true);
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // MS Word

        FileComponent file = createFileComponent(FileType.WORD);

        if (file != null) {
            addToDesktop(file, false);
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
// Bitmap image
        FileComponent file = createFileComponent(FileType.BITMAP);

        if (file != null) {
            addToDesktop(file, false);
        }
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // WinRAR

        FileComponent file = createFileComponent(FileType.WINRAR);

        if (file != null) {
            addToDesktop(file, false);
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // MS Excel
        FileComponent file = createFileComponent(FileType.EXCEL);

        if (file != null) {
            addToDesktop(file, false);
        }
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // Paste operation
        FileComponent fc = copiedComponent.clone();
        String createCopiedFileName = createCopiedFileName(fc);
        fc.setName(createCopiedFileName);

        addToDesktop(fc, fc.isFile(), contextMenuX + 10, contextMenuY + 10, true);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // Rename operation
        String name = JOptionPane.showInputDialog(this, "Name: ", "Question", JOptionPane.QUESTION_MESSAGE);

        if (!name.isEmpty()) {
            FileComponent fc = (FileComponent) fileExplorer.getNode(rightClickedLabel.getText());
            fc.save();
            fc.setName(name);
            changeName(rightClickedLabel, jMenuItem1, true, name);
        }
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        //Undo operation

        if (rightClickedLabel != null) {

            FileComponent fileComp = (FileComponent) fileExplorer.getNode(rightClickedLabel.getText());
            FileComponent undo = fileComp.undo();
            boolean enable = true;
            if (fileComp.getRemainingStateCount() == 0) {
                jMenuItem1.setEnabled(false);
                enable = false;
            }
            changeName(rightClickedLabel, jMenuItem1, enable, undo.getName());

        }


    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
//
//        try {
//            Properties props = new Properties();
//            props.put("logoString", "Rajitha");
//            props.put("centerWindowTitle", "on");
//            props.put("backgroundPattern", "on");
//            props.put("macStyleScrollBar", "on");
//            McWinLookAndFeel.setCurrentTheme(props);
//            javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.mcwin.McWinLookAndFeel");
//        } catch (Exception e) {
//            e.printStackTrace();
//        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPanel panel;
    // End of variables declaration//GEN-END:variables
    private void setIcon() {
        toolkit = getToolkit();
        this.setIconImage(getToolkit().getDefaultToolkit().getImage(getClass().getResource("../img/desktop.png")));
    }

    private void mouseEventHandler(MouseEvent evt, String folderIfApplicable) {

        if (evt.getButton() == MouseEvent.BUTTON1 && evt.getClickCount() == 2) {
            openFileExplorer(folderIfApplicable);
        }

        if (evt.getButton() == MouseEvent.BUTTON3) {
            JLabel label = (JLabel) evt.getSource();
            rightClickedLabel = label;
            contextMenuX = label.getX() + LABEL_WIDTH / 2;
            contextMenuY = label.getY() + (LABEL_HEIGHT / 4 * 3);
            jPopupMenu1.show(this, contextMenuX, contextMenuY);
        }
    }

    private void openFileExplorer(String folder) {

        FileExplorer explorer = Home.fileExplorer;
        String newFilePath = explorer.getCurrentFilePath() + explorer.getPathSeperator() + folder + explorer.getCurrentFilePath();

        explorer.setCurrent(folder);
        explorer.setParentFolder(ROOT);
        explorer.showFolderContent();
        explorer.setVisible(true);
        explorer.setCurrentFilePath(newFilePath);
    }

    private void move(JComponent comp, MouseEvent evt) {
         //comp.setLocation(evt.getX(), evt.getY());
    }

    private void init() {
        fileExplorer = new FileExplorer();
        jDesktopPane1.add(fileExplorer, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 100, INITIAL_FILE_EXPLORER_WIDTH, INITIAL_FILE_EXPLORER_HEIGHT));
    }

    private void addToDesktop(FileComponent fileComponent, boolean isFolder) {

        JLabel label = new JLabel();
        label.setIcon(fileComponent.getImage());

        label.setVerticalTextPosition(JLabel.BOTTOM);
        label.setHorizontalTextPosition(JLabel.CENTER);
        label.setText(fileComponent.getName());
        label.setToolTipText(label.getText());
        label.setForeground(Color.WHITE);

        label.setBounds(contextMenuX, contextMenuY, LABEL_WIDTH, LABEL_HEIGHT);

        label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                mouseEventHandler(evt, label.getText());
            }
        });
        label.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                move(label, evt);
            }
        });

        jDesktopPane1.add(label, new org.netbeans.lib.awtextra.AbsoluteConstraints(contextMenuX, contextMenuY, LABEL_WIDTH, LABEL_HEIGHT));
        fileExplorer.setCurrent(Home.ROOT);
        fileExplorer.addToHierarchy(fileComponent, false);
    }

    private FileComponent createFileComponent(FileType type) {

        String msg;
        if (type == FileType.FOLDER) {
            msg = "Please enter the folder name";
        } else {
            msg = "Please enter the file name";
        }

        String name = JOptionPane.showInputDialog(this, msg, "Question", JOptionPane.QUESTION_MESSAGE);
        if (name == null || name.isEmpty()) {
            return null;
        } else {

            FileComponent fileComp;
            if (type == FileType.FOLDER) {
                FolderFactory factory = new FolderFactory();
                fileComp = factory.getFileComponent(FileType.FOLDER);
            } else {
                FileFactory factory = new FileFactory();
                fileComp = factory.getFileComponent(type);
            }

            fileComp.setName(name);
            fileComp.setFilePath(fileExplorer.getCurrentFilePath());
            return fileComp;

        }

    }

    private void addToDesktop(FileComponent fileComponent, boolean isFolder, int x, int y, boolean cloned) {

        JLabel label = new JLabel();
        label.setIcon(fileComponent.getImage());

        label.setVerticalTextPosition(JLabel.BOTTOM);
        label.setHorizontalTextPosition(JLabel.CENTER);
        label.setText(fileComponent.getName());
        label.setToolTipText(label.getText());
        label.setForeground(Color.WHITE);

        label.setBounds(x, y, LABEL_WIDTH, LABEL_HEIGHT);

        label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                mouseEventHandler(evt, label.getText());
            }
        });
        label.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                move(label, evt);
            }
        });

        jDesktopPane1.add(label, new org.netbeans.lib.awtextra.AbsoluteConstraints(x, y, LABEL_WIDTH, LABEL_HEIGHT));
        fileExplorer.setCurrent(Home.ROOT);

        if (cloned) {
            addClonedSubFoldersAndFiles(fileComponent, ROOT);
        } else {
            addSubFoldersAndFiles(fileComponent, ROOT);
        }
    }

    private void addClonedSubFoldersAndFiles(FileComponent fc, String parent) {
        if (fc.isFile()) {
            System.out.println(fc.getName() + "->" + parent);
            fileExplorer.addToHierarchy(fc.clone(), parent, true);
        } else {

            if (firstTime) {
                fileExplorer.addToHierarchy(fc, parent, true);
                firstTime = false;
            } else {
                fileExplorer.addToHierarchy(fc.clone(), parent, true);
            }

            Folder folder = (Folder) fc;
            parentFolderFileCount = folder.getFileListSize();
            for (int i = 0; i < parentFolderFileCount; i++) {
                FileComponent sub = folder.getFileFromList(i);
                addClonedSubFoldersAndFiles(sub, folder.getName());
            }
        }
    }

    private void addSubFoldersAndFiles(FileComponent fc, String parent) {
        if (fc.isFile()) {
            fileExplorer.addToHierarchy(fc, parent, true);
        } else {
            fileExplorer.addToHierarchy(fc, parent, true);
            Folder folder = (Folder) fc;
            parentFolderFileCount = folder.getFileListSize();
            for (int i = 0; i < parentFolderFileCount; i++) {
                FileComponent sub = folder.getFileFromList(i);
                addSubFoldersAndFiles(sub, folder.getName());
            }
        }
    }

    private void changeName(JLabel rightClickedLabel1, JMenuItem jMenuItem11, boolean enable, String name) {

        rightClickedLabel.setText(name);
        rightClickedLabel1.setToolTipText(name);
        jMenuItem1.setEnabled(enable);
    }

    private String createCopiedFileName(FileComponent copiedComponent) {
        String name = copiedComponent.getName() + " - Copy";

        int count = 0;
        ArrayList<FileComponent> currentFolderContent = fileExplorer.getCurrentFolderContent();
        for (FileComponent fileComponent : currentFolderContent) {
            if (fileComponent.name.contains(name)) {
                ++count;
            }

        }

        if (count == 0) {
            return name;
        } else {
            return name + " (" + count + ")";
        }
    }
}
